#!/usr/bin/env bash

response=""
active_player=""

function kodi_request() {
    response="$(curl -X POST -H 'Content-Type: application/json' ${LOGIN:+--user "$LOGIN"} -d "$1" "http://$REMOTE/jsonrpc" 2>/dev/null)"
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "REQUEST:" >&2
        jq <<< "$1" >&2
        echo "RESPONSE:" >&2
        jq <<< "$response" >&2
    fi
    ! [[ $response =~ '"error":' ]] || error "$response"
}
function kodi_stop() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request stop:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.Stop", "params": { "playerid": '"$active_player"' }, "id":1}'
    fi
}
function kodi_next() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request next:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.GoTo", "params": { "playerid": '"$active_player"', "to":"next" }, "id":1}'
    fi
}
function kodi_previous() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request previous:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.GoTo", "params": { "playerid": '"$active_player"', "to":"previous" }, "id":1}'
    fi
}
function kodi_pause() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request pause:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.PlayPause", "params": { "playerid": '"$active_player"' }, "id":1}'
    fi
}
function kodi_clear() {
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "Request clear playlist:" >&2
    fi
    kodi_request '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params": {"playlistid": 1}, "id": 1}'
}
function kodi_get_active() {
    kodi_request '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id":1}'
    [[ $? ]] || error "Failed to send - is Kodi running?"
    unset active_player
    if [[ $response ]]; then
        # echo "$response"  >&2
        # active_player=$(echo "$response" | jq -c '.result[] | select(.type | contains("video")).playerid')
        active_player=$(echo "$response" | jq -c '.result[] | select(.type).playerid')
    fi
}
function kodi_volume() {
    VOLUME="${INPUT//[!0-9]/}"
    if [[ $VOLUME ]] && [[ $VOLUME -ge 0 ]] && [[ $VOLUME -le 100 ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request volume: $VOLUME%" >&2
        fi
        kodi_request '{"jsonrpc":"2.0","method":"Application.SetVolume","params":{"volume":'"$VOLUME"'},"id":1}'
    fi
}
function kodi_volamp() {
    VOLUME="${INPUT//[!0-9]/}"
    if [[ -z ${VOLUME_AMP_STEPS+x} ]]; then
        VOLUME_AMP_STEPS=5
    fi
    if [[ $VOLUME ]]; then
        x=0
        if [[ $VOLUME -gt 0 ]]; then
            echo "Request volume amplification up" >&2
            while [[ $x -lt $VOLUME_AMP_STEPS ]]; do
                kodi_request '{"jsonrpc": "2.0","method":"Input.ExecuteAction","params":{"action":"volampup"}}' # --> raise volume amplification +1
                x=$(( x + 1 ))
            done
        elif [[ $VOLUME -eq 0 ]]; then
        echo "Request volume amplification down" >&2
            while [[ $x -lt $VOLUME_AMP_STEPS ]]; do
                kodi_request '{"jsonrpc": "2.0","method":"Input.ExecuteAction","params":{"action":"volampdown"}}' # --> lower volume amplification -1
                x=$(( x + 1 ))
            done
        fi
    fi
}
function kodi_shutdown() {
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "Request shutdown:" >&2
    fi
    kodi_request '{"jsonrpc": "2.0", "method": "System.Shutdown","params":{}}'
}
function kodi_reboot() {
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "Request reboot:" >&2
    fi
    kodi_request '{"jsonrpc": "2.0", "method": "System.Reboot","params":{}}'
}
function check_url() {
    local input_string=$1
    local url_pattern='(https?|ftp|file|rtsp)://[-[:alnum:]\+&@#/%?=~_|!:,.;]+'

    if [[ ! $input_string =~ $url_pattern ]]; then
        unset INPUT
        main
    fi
}
function kodi_send_url(){
    kodi_get_active
    # if [[ $active_player == *'"type":"video"'* ]]; then
    if [[ -n $active_player ]]; then
        echo "Queueing" >&2
        kodi_request '{"jsonrpc":"2.0","method":"Playlist.Add","params":{"item":{"file":"'"$url"'"},"playlistid":1},"id":1}'
    else
        echo "Playing" >&2
        kodi_request '[{"jsonrpc": "2.0", "method": "Playlist.Clear", "params": {"playlistid": 1}, "id": 1},
{"jsonrpc":"2.0","method":"Playlist.Add","params":{"playlistid":1,"item":{"file":"'"$url"'"}},"id":1},
{"jsonrpc":"2.0","method":"Player.Open","params":{"item":{"playlistid":1,"position":0}},"id":1}]'
    fi

}
function kodi_send_dir(){
    kodi_request '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"'"$1"'"},"id": 1}'

    while read -r json_string; do
        # Remove escape characters
        clean_json_string=$(echo "$json_string" | jq -r '.files[]')
        while read -r file; do
            kodi_request '{"jsonrpc":"2.0","method":"Playlist.Add","params":{"playlistid":1,"item":{"file":"'"$file"'"}},"id":1}'
        done <<<"$(echo "$clean_json_string" | jq -r '.file')"
    done <<<"$(echo "$response" | jq -c '.result')"

    kodi_request '{"jsonrpc":"2.0","method":"Player.Open","params":{"item":{"position":0,"playlistid":1},"options":{}},"id":1}'
}

function kodi_list_dir(){
    kodi_request '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"'"$1"'"},"id": 1}'
    while read -r json_string; do
        clean_json_string=$(echo "$json_string" | jq -r '.files[]')
        while read -r label; do
            echo "$label" >&2
        done <<<"$(echo "$clean_json_string" | jq -r '.label')"
    done <<<"$(echo "$response" | jq -c '.result')"
}
function kodi_toggle_addons_on(){
    kodi_request '{"jsonrpc": "2.0", "method": "Addons.SetAddonEnabled", "params": {"addonid": "'"$1"'", "enabled": true}, "id": 1}'
}
function kodi_toggle_addons_off(){
    kodi_request '{"jsonrpc": "2.0", "method": "Addons.SetAddonEnabled", "params": {"addonid": "'"$1"'", "enabled": false}, "id": 1}'
}
# curl 'http://192.168.0.201:8080/jsonrpc?Playlist.GetItems' \
#   -H 'Accept: text/plain, */*; q=0.01' \
#   -H 'Accept-Language: en-US,en;q=0.9' \
#   -H 'Authorization: Basic a29kaTprb2Rp' \
#   -H 'Connection: keep-alive' \
#   -H 'Content-Type: application/json' \
#   -H 'DNT: 1' \
#   -H 'Origin: http://192.168.0.201:8080' \
#   -H 'Referer: http://192.168.0.201:8080/' \
#   -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36' \
#   -H 'X-Requested-With: XMLHttpRequest' \
#   --data-raw '[{"jsonrpc":"2.0","method":"Playlist.GetItems","params":[1,["title"]],"id":809}]' \
#   --insecure


#   [{"id":809,"jsonrpc":"2.0","result":{"items":[{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"},{"label":"KodiTP01","title":"","type":"unknown"}],"limits":{"end":14,"start":0,"total":14}}}]

#  curl 'http://192.168.0.201:8080/jsonrpc?Playlist.Insert' \
#   -H 'Accept: text/plain, */*; q=0.01' \
#   -H 'Accept-Language: en-US,en;q=0.9' \
#   -H 'Authorization: Basic a29kaTprb2Rp' \
#   -H 'Connection: keep-alive' \
#   -H 'Content-Type: application/json' \
#   -H 'DNT: 1' \
#   -H 'Origin: http://192.168.0.201:8080' \
#   -H 'Referer: http://192.168.0.201:8080/' \
#   -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36' \
#   -H 'X-Requested-With: XMLHttpRequest' \
#   --data-raw '[{"jsonrpc":"2.0","method":"Playlist.Insert","params":[1,14,{"file":"upnp://61e0d9b2-9fb0-1007-22e6-8f1a201d1e5a/RDpcVmlkZW9zXHBsYXlsaXN0XExvdmUuRGVhdGguQW5kLlJvYm90cy5TMDEuQ09NUExFVEUuNzIwcC5XRUIueDI2NC1HYWxheHlUVltUR3hdXExvdmUuRGVhdGguQW5kLlJvYm90cy5TMDFFMTguNzIwcC5XRUIueDI2NC1HYWxheHlUVi4zNjAubXA0/"}],"id":810}]' \
#   --insecure