#!/usr/bin/env bash

# kodi commands
function kodi_stop() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request stop:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.Stop", "params": { "playerid": '"$active_player"' }, "id":1}'
    fi
}
function kodi_next() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request next:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.GoTo", "params": { "playerid": '"$active_player"', "to":"next" }, "id":1}'
    fi
}
function kodi_previous() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request previous:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.GoTo", "params": { "playerid": '"$active_player"', "to":"previous" }, "id":1}'
    fi
}
function kodi_pause() {
    kodi_get_active
    if [[ -n $active_player ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request pause:" >&2
        fi
        kodi_request '{"jsonrpc": "2.0", "method":"Player.PlayPause", "params": { "playerid": '"$active_player"' }, "id":1}'
    fi
}
function kodi_clear() {
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "Request clear playlist:" >&2
    fi
    kodi_request '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params": [1], "id": 1}'
}
function kodi_get_active() {
    kodi_request '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id":1}'
    [[ $? ]] || error "Failed to send - is Kodi running?"
    unset active_player
    if [[ $response ]]; then
        # echo "$response"  >&2
        # active_player=$(echo "$response" | jq -c '.result[] | select(.type | contains("video")).playerid')
        active_player=$(echo "$response" | jq -c '.result[] | select(.type).playerid')
    fi
    # echo "Player id: $active_player"
}
function kodi_volume() {
    VOLUME="${INPUT//[!0-9]/}"
    if [[ $VOLUME ]] && [[ $VOLUME -ge 0 ]] && [[ $VOLUME -le 100 ]]; then
        if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
            echo "Request volume: $VOLUME%" >&2
        fi
        kodi_request '{"jsonrpc":"2.0","method":"Application.SetVolume","id":1,"params":{"volume":'"$VOLUME"'}}'
    fi
}
function kodi_volamp() {
    VOLUME="${INPUT//[!0-9]/}"
    if [[ -z ${VOLUME_AMP_STEPS+x} ]]; then
        VOLUME_AMP_STEPS=5
    fi
    if [[ $VOLUME ]]; then
        x=0
        if [[ $VOLUME -gt 0 ]]; then
            echo "Request volume amplification up" >&2
            while [[ $x -lt $VOLUME_AMP_STEPS ]]; do
                kodi_request '{"jsonrpc": "2.0","method":"Input.ExecuteAction","params":{"action":"volampup"}}' # --> raise volume amplification +1
                x=$(( x + 1 ))
            done
        elif [[ $VOLUME -eq 0 ]]; then
        echo "Request volume amplification down" >&2
            while [[ $x -lt $VOLUME_AMP_STEPS ]]; do
                kodi_request '{"jsonrpc": "2.0","method":"Input.ExecuteAction","params":{"action":"volampdown"}}' # --> lower volume amplification -1
                x=$(( x + 1 ))
            done
        fi
    fi
}
function kodi_shutdown() {
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "Request shutdown:" >&2
    fi
    kodi_request '{"jsonrpc": "2.0", "method": "System.Shutdown"}'
}
function kodi_reboot() {
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "Request reboot:" >&2
    fi
    kodi_request '{"jsonrpc": "2.0", "method": "System.Reboot"}'
}
function kodi_request() {
    response="$(curl -X POST -H 'Content-Type: application/json' ${LOGIN:+--user "$LOGIN"} -d "$1" "http://$REMOTE/jsonrpc" 2>/dev/null)"
    if [[ -n ${VERBOSE+x} ]] && [[ $VERBOSE == 1 ]]; then
        echo "REQUEST: $1" >&2
        echo "RESPONSE: $response" >&2
    fi
    ! [[ $response =~ '"error":' ]] || error "$response"
}
function kodi_send(){
    kodi_get_active
    # if [[ $active_player == *'"type":"video"'* ]]; then
    if [[ -n $active_player ]]; then
        echo "Queueing" >&2
        kodi_request '{"jsonrpc":"2.0","method":"Playlist.Add","params":{"item":{"file":"'"$url"'"},"playlistid":0},"id":1}'
    else
        echo "Playing" >&2
        kodi_request '[{"jsonrpc": "2.0", "method": "Playlist.Clear", "params": {"playlistid": 0}, "id": 0},
{"jsonrpc":"2.0","method":"Playlist.Add","params":{"playlistid":0,"item":{"file":"'"$url"'"}},"id":1},
{"jsonrpc":"2.0","method":"Player.Open","params":{"item":{"playlistid":0,"position":0}},"id":1}]'
    fi

}
function check_url() {
    # Get the input string
    local input_string=$1

    # Use regex pattern to check if the string matches the supported URL protocol and format
    local url_pattern='(https?|ftp|file|rtsp)://[-[:alnum:]\+&@#/%?=~_|!:,.;]+'

    if [[ ! $input_string =~ $url_pattern ]]; then
        echo "Unsupported[url/path/cmd]: $input_string"
        unset INPUT
        kodi_main
    fi
}
