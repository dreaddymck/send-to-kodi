#!/usr/bin/env bash

function kodi_main() {

    unset url

    set -o history

    if [ -z "$INPUT" ]; then

        read -r -e -d $'\n' -p 'SEND TO KODI [url/path/cmd]: ' INPUT

        if [[ "$INPUT" =~ ^(iptv)$ ]]; then
            unset INPUT
            iptv_main
        fi
        if [[ "$INPUT" =~ ^(dlrz|dl|rz)$ ]]; then
            unset INPUT
            ytdl_dlrz
        fi     
        if [[ -f "$SEND_TO_KODI_DIR/lib/commands" ]]; then
            source "$SEND_TO_KODI_DIR/lib/commands"
        fi 
        if [[ -z $INPUT ]]; then
            unset INPUT
            kodi_main
        fi        
    fi

    # trap 'cleanup' EXIT
    trap cleanup INT TERM

    # Don't try to resolve
    if ((SEND_RAW)); then
        url="$INPUT"
    elif [[ $INPUT =~ ^! ]]; then
        url="${INPUT:1}"
    # Local file
    elif [[ -f "$INPUT" ]]; then
        serve "$INPUT"
        url="http://$HOST_NAME:$SHARE_PORT/media"
    # Other protocols
    elif ! [[ $INPUT =~ ^https?:// ]]; then
        url="$INPUT"
    # Formats supported by Kodi
    elif [[ $INPUT =~ \.(mp[g34]|mk[va]|mov|avi|flv|wmv|asf|flac|m4[av]|aac|og[gm]|pls|jpe?g|png|gif|jpe?g|tiff|m3u8?)(\?.*)?$ ]]; then
        url="$INPUT"
    # youtube.com / youtu.be
    elif ((KODI_YOUTUBE)) && [[ $INPUT =~ ^https?://(www\.)?youtu(\.be/|be\.com/watch\?v=) ]]; then
        id="$(sed -E 's%.*(youtu\.be/|[&?]v=)([a-zA-Z0-9_-]+).*%\2%' <<<"$INPUT")"
        url="plugin://plugin.video.youtube/?action=play_video&videoid=$id"
    # youtube-dl / yt-dlp
    else
        # youtube-dl -g may output different kinds of URL's:
        #
        # 1. Single video URL
        #    This can be played by Kodi directly, most of the time.
        #    Sometimes this will be an MPD and we'll have to do step 3.
        #
        # 2. Video URL + Audio URL
        #    This needs downloading and muxing, which youtube-dl will do for us.
        #    Kodi can do that natively, but only for local media.
        #    Only when an audio file has the same name as a video file.
        #    It doesn't work for STRM files...
        #
        #    If only... Player.Open {"file":"http://video.mp4", "ext_audio":"http://audio.mp3"}
        #
        # 3. MPD + same MPD
        #    Kodi supports MPD playback with InputStream.Adaptive.
        #    Only way to trigger that is through an addon, or by using #KODIPROP in a STRM file.
        #    In my testing the two MPD's provided by youtube-dl have been identical.
        #
        #    If only... Player.Open {"file":"http://playlist.mpd"}
        #
        # 4. Video MPD + Audio MPD (?)
        #    IF this exists, we have to do step 2.
        #
        # 5. ISM or HLS (?)
        #    Kodi has support for these, the same way 3. is done, but I haven't implemented it
        #    in the script, because I have no sites to test on.
        #

        #list media resolutions if avaialable
        if ((LISTFORMATS)); then
            $YTDLP --list-formats --user-agent "'$USER_AGENT'" "$INPUT"
        fi

        #check for valid json
        if jq -e . >/dev/null 2>&1 <<<"$RESOLUTION_JSON"; then
            while read -r json_string; do
                # Remove escape characters
                clean_json_string=$(echo "$json_string" | jq -r '.')
                res=$(echo "$clean_json_string" | jq -r '.res')

                while read -r url_item; do

                    if [[ "$INPUT" =~ $url_item ]]; then
                        echo "Searching resolution: $res" >&2
                        if url="$($YTDLP -gf "best[height<=$res]" --user-agent "'$USER_AGENT'" "$INPUT")"; then
                            break
                        fi
                    fi

                done <<<"$(echo "$clean_json_string" | jq -r '.value[]')"

                if [[ -n $url ]]; then
                    break
                fi

            done <<<"$(echo "$RESOLUTION_JSON" | jq -c '.[]')"
        fi
        if [[ -z $url ]]; then
            echo "Searching" >&2
            if ! url="$($YTDLP -gf b --user-agent "'$USER_AGENT'" "$INPUT")"; then
                unset INPUT
                kodi_main
            fi
        fi


        # Honestly not sure what to do with this.

        dash='^[^?]*\.mpd(\?|$)'
        # echo "Looking for best video..." >&2
        # best="$(ytdl -g "$INPUT")" || error "No videos found or site not supported by youtube-dl"
        # echo "Looking for compatible video..." >&2
        # url="$(ytdl -gf best "$INPUT")"
        # There is a better URL (but it will need some pre-processing)
        # TODO assign $best or activate this action as a mode
        if [[ "$url" != "$best" ]]; then

            video="$(head -n1 <<<"$best" | tail -n1)"
            audio="$(head -n2 <<<"$best" | tail -n1)"

            # MPEG-DASH question
            if [[ $video == "$audio" && $video =~ $dash ]]; then
                # [[ -z $url || $url =~ $dash ]] || question "Use MPEG-DASH for better quality?" && url="$video"
                [[ -z $url || $url =~ $dash ]] || url="$video"

            # Download with yt-dlp
            elif [[ -z $url ]]; then
                download_and_serve "$INPUT"
                url="http://$HOST_NAME:$SHARE_PORT/media"
            fi
        fi

        # MPEG-DASH
        # Do this down here since both $url and $best can be a MPD
        if [[ $url =~ $dash ]]; then
            serve # create TMP_DIR
            (
                echo '#KODIPROP:inputstream=inputstream.adaptive'
                echo '#KODIPROP:inputstream.adaptive.manifest_type=mpd'
                echo "$video"
            ) >"$TMP_DIR/media.strm"
            url="http://$HOST_NAME:$SHARE_PORT/media.strm"
        fi
        # TODO see above

    fi

    check_url "$url"  
    kodi_send
    history -s "$INPUT"
    unset INPUT

    # Maybe wait for server (trap will kill it on EXIT)
    if [[ $TWISTED_PID ]]; then
        echo "File share active, press Ctrl+C to abort..." >&2
        wait
    fi

    kodi_main
}
